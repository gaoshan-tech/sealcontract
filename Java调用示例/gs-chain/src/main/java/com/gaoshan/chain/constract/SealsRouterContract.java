package com.gaoshan.chain.constract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.storm3j.abi.EventEncoder;
import org.storm3j.abi.TypeReference;
import org.storm3j.abi.datatypes.Address;
import org.storm3j.abi.datatypes.Bool;
import org.storm3j.abi.datatypes.DynamicBytes;
import org.storm3j.abi.datatypes.Event;
import org.storm3j.abi.datatypes.Type;
import org.storm3j.abi.datatypes.generated.Bytes32;
import org.storm3j.abi.datatypes.generated.Int256;
import org.storm3j.abi.datatypes.generated.Uint256;
import org.storm3j.abi.datatypes.generated.Uint8;
import org.storm3j.crypto.Credentials;
import org.storm3j.protocol.Storm3j;
import org.storm3j.protocol.core.DefaultBlockParameter;
import org.storm3j.protocol.core.RemoteCall;
import org.storm3j.protocol.core.RemoteFunctionCall;
import org.storm3j.protocol.core.methods.request.FstFilter;
import org.storm3j.protocol.core.methods.response.BaseEventResponse;
import org.storm3j.protocol.core.methods.response.Log;
import org.storm3j.protocol.core.methods.response.TransactionReceipt;
import org.storm3j.tx.Contract;
import org.storm3j.tx.TransactionManager;
import org.storm3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.5.
 */
@SuppressWarnings("rawtypes")
public class SealsRouterContract extends Contract {
    private static final String BINARY = "608060405260405180602001610014906100ae565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b6020831061005e578051825260208201915060208101905060208303925061003b565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001206003553480156100a857600080fd5b506100bc565b611de58062003d7f83390190565b613cb380620000cc6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c8063915666e6116100a2578063c4d66de811610071578063c4d66de81461087b578063d31e5d4b146108bf578063d4c08f021461091b578063dcffa4e414610939578063f2fde38b146109a757610116565b8063915666e614610677578063a256c283146106fb578063b36dc99714610719578063b4e773a1146107a257610116565b8063715018a6116100e9578063715018a61461049257806379853a1b1461049c5780638c7b01d3146105755780638da5cb5b146105d157806390ef29961461061b57610116565b806302abc6ad1461011b57806339fd76cd146101cf57806348115f9c146102ea57806364f9b7e6146103de575b600080fd5b6101b5600480360360e081101561013157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803560ff16906020019092919080359060200190929190803590602001909291905050506109eb565b604051808215151515815260200191505060405180910390f35b6102a8600480360360408110156101e557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561022257600080fd5b82018360208201111561023457600080fd5b8035906020019184600183028401116401000000008311171561025657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610b46565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103636004803603608081101561030057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b9e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103a3578082015181840152602081019050610388565b50505050905090810190601f1680156103d05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610478600480360360e08110156103f457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803560ff1690602001909291908035906020019092919080359060200190929190505050610c49565b604051808215151515815260200191505060405180910390f35b61049a610da4565b005b610533600480360360408110156104b257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156104ef57600080fd5b82018360208201111561050157600080fd5b8035906020019184600183028401116401000000008311171561052357600080fd5b9091929391929390505050610f2e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105b76004803603602081101561058b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061151b565b604051808215151515815260200191505060405180910390f35b6105d9611571565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61065d6004803603602081101561063157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061159a565b604051808215151515815260200191505060405180910390f35b6106b96004803603602081101561068d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061170a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610703611794565b6040518082815260200191505060405180910390f35b6107886004803603606081101561072f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117a1565b604051808215151515815260200191505060405180910390f35b610839600480360360408110156107b857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156107f557600080fd5b82018360208201111561080757600080fd5b8035906020019184600183028401116401000000008311171561082957600080fd5b9091929391929390505050611872565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108bd6004803603602081101561089157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a08565b005b610901600480360360208110156108d557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611bbd565b604051808215151515815260200191505060405180910390f35b610923611bdd565b6040518082815260200191505060405180910390f35b6109656004803603602081101561094f57600080fd5b8101908080359060200190929190505050611be3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6109e9600480360360208110156109bd57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c1f565b005b60008573ffffffffffffffffffffffffffffffffffffffff168760ff168973ffffffffffffffffffffffffffffffffffffffff167f628c7d642c872f7460cabd4a47b08726b15931adbcf4af5acbec7764608a3bec60405160405180910390a48773ffffffffffffffffffffffffffffffffffffffff166322ce1c338888888888886040518763ffffffff1660e01b8152600401808760ff1660ff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018460ff1660ff1681526020018381526020018281526020019650505050505050602060405180830381600087803b158015610afe57600080fd5b505af1158015610b12573d6000803e3d6000fd5b505050506040513d6020811015610b2857600080fd5b81019080805190602001909291905050509050979650505050505050565b6001602052816000526040600020818051602081018201805184825260208301602085012081835280955050505050506000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606084848484604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018460ff1660ff1660f81b81526001018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018281526020019450505050506040516020818303038152906040529050949350505050565b60008573ffffffffffffffffffffffffffffffffffffffff168760ff168973ffffffffffffffffffffffffffffffffffffffff167fdf26fab269074f8c1b191a0667d9d156eb5b41479b9f4f18722d62e714e67a0660405160405180910390a48773ffffffffffffffffffffffffffffffffffffffff1663a7abc6bf8888888888886040518763ffffffff1660e01b8152600401808760ff1660ff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018460ff1660ff1681526020018381526020018281526020019650505050505050602060405180830381600087803b158015610d5c57600080fd5b505af1158015610d70573d6000803e3d6000fd5b505050506040513d6020811015610d8657600080fd5b81019080805190602001909291905050509050979650505050505050565b610dac611e2f565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e6e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000610f38611e2f565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ffa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561109d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f5365616c73466163746f72793a205a45524f5f4144445245535300000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208484604051808383808284378083019250505092505050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f5365616c73466163746f72793a205365616c5f4558495354530000000000000081525060200191505060405180910390fd5b6060604051806020016111d590611e37565b6020820181038252601f19601f8201166040525090506000858585604051602001808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401838380828437808301925050509350505050604051602081830303815290604052805190602001209050808251602084016000f592508273ffffffffffffffffffffffffffffffffffffffff1663c4d66de8876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156112e157600080fd5b505af11580156112f5573d6000803e3d6000fd5b5050505082600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208686604051808383808284378083019250505092505050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508573ffffffffffffffffffffffffffffffffffffffff167f62988a5fd61af59a922a9792dadb1666979ff7e4430543aaed3f3725bbd7f00c86868660028054905060405180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281038252868682818152602001925080828437600081840152601f19601f8201169050808301925050509550505050505060405180910390a250509392505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006115a4611e2f565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611666576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f9f77920c3de8baaa98d273e8aa75fae382aaa9f7f60f38979137853e5b73ea2c60405160405180910390a260019050919050565b60008173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561175257600080fd5b505afa158015611766573d6000803e3d6000fd5b505050506040513d602081101561177c57600080fd5b81019080805190602001909291905050509050919050565b6000600280549050905090565b60008373ffffffffffffffffffffffffffffffffffffffff16630e800b9f84846040518363ffffffff1660e01b8152600401808360ff1660ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561182e57600080fd5b505afa158015611842573d6000803e3d6000fd5b505050506040513d602081101561185857600080fd5b810190808051906020019092919050505090509392505050565b600030848484604051602001808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140183838082843780830192505050935050505060405160208183030381529060405280519060200120604051806020016118ec90611e37565b6020820181038252601f19601f820116604052506040516020018082805190602001908083835b602083106119365780518252602082019150602081019050602083039250611913565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012060405160200180807fff000000000000000000000000000000000000000000000000000000000000008152506001018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140183815260200182815260200193505050506040516020818303038152906040528051906020012060001c90509392505050565b600060019054906101000a900460ff1680611a2f57506000809054906101000a900460ff16155b611a84576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613c50602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015611ad4576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611adc611e2f565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a381600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015611bb95760008060016101000a81548160ff0219169083151502179055505b5050565b60046020528060005260406000206000915054906101000a900460ff1681565b60035481565b60028181548110611bf057fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611c27611e2f565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ce9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613c2a6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b611de580611e458339019056fe608060405234801561001057600080fd5b50611dc5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b146102f7578063a7abc6bf14610341578063bb329c69146103d5578063c4d66de8146104a9578063f2fde38b146104ed578063fc4e562214610531576100b4565b806301b0bdbd146100b95780630e800b9f1461012257806322ce1c331461018b57806324ec05031461021f5780637019202214610288578063715018a6146102ed575b600080fd5b610108600480360360408110156100cf57600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061059a565b604051808215151515815260200191505060405180910390f35b6101716004803603604081101561013857600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610857565b604051808215151515815260200191505060405180910390f35b610205600480360360c08110156101a157600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803560ff169060200190929190803590602001909291908035906020019092919050505061090a565b604051808215151515815260200191505060405180910390f35b61026e6004803603604081101561023557600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d23565b604051808215151515815260200191505060405180910390f35b6102d76004803603604081101561029e57600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fe0565b6040518082815260200191505060405180910390f35b6102f5611005565b005b6102ff61118f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103bb600480360360c081101561035757600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803560ff16906020019092919080359060200190929190803590602001909291905050506111b8565b604051808215151515815260200191505060405180910390f35b61042e600480360360608110156103eb57600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115d1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561046e578082015181840152602081019050610453565b50505050905090810190601f16801561049b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104eb600480360360208110156104bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061167b565b005b61052f6004803603602081101561050357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611830565b005b6105806004803603604081101561054757600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a40565b604051808215151515815260200191505060405180910390f35b60006105a4611a6f565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610666576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600160008460ff1660ff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f5f6164647220686173206578697374000000000000000000000000000000000081525060200191505060405180910390fd5b60018060008560ff1660ff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555042600260008560ff1660ff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600115158273ffffffffffffffffffffffffffffffffffffffff167f91ed1c58488ad4f26f95a8e1c0009202c1599810103b82c7d7cb8b8a4c5f352660405160405180910390a36001905092915050565b600061086161118f565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561089d5760019050610904565b600160008460ff1660ff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690505b92915050565b6000600160008860ff1660ff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f5f6164647220686173207265766f6b656400000000000000000000000000000081525060200191505060405180910390fd5b84600260008960ff1660ff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410610aad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5f7369676e20697320696e76616c69640000000000000000000000000000000081525060200191505060405180910390fd5b6000610b59858585308c8c8c604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018460ff1660ff1660f81b81526001018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001945050505050604051602081830303815290604052611a77565b9050610b6361118f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f5f7369676e206973206572726f7200000000000000000000000000000000000081525060200191505060405180910390fd5b6000600160008a60ff1660ff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555085600260008a60ff1660ff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600015158773ffffffffffffffffffffffffffffffffffffffff167f0d845ae82024b310a3b75b2ae201bda3809831b599b661519ac4dc43fe80802e60405160405180910390a360019150509695505050505050565b6000610d2d611a6f565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610def576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600160008460ff1660ff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610ec5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f5f6164647220686173207265766f6b656400000000000000000000000000000081525060200191505060405180910390fd5b6000600160008560ff1660ff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555042600260008560ff1660ff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600015158273ffffffffffffffffffffffffffffffffffffffff167f0d845ae82024b310a3b75b2ae201bda3809831b599b661519ac4dc43fe80802e60405160405180910390a36001905092915050565b6002602052816000526040600020602052806000526040600020600091509150505481565b61100d611a6f565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160008860ff1660ff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611291576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f5f6164647220686173206578697374000000000000000000000000000000000081525060200191505060405180910390fd5b84600260008960ff1660ff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541061135c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5f7369676e20697320696e76616c69640000000000000000000000000000000081525060200191505060405180910390fd5b6000611408858585308c8c8c604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018460ff1660ff1660f81b81526001018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001945050505050604051602081830303815290604052611a77565b905061141261118f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146114b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f5f7369676e206973206572726f7200000000000000000000000000000000000081525060200191505060405180910390fd5b60018060008a60ff1660ff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555085600260008a60ff1660ff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600115158773ffffffffffffffffffffffffffffffffffffffff167f91ed1c58488ad4f26f95a8e1c0009202c1599810103b82c7d7cb8b8a4c5f352660405160405180910390a360019150509695505050505050565b606030848484604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018460ff1660ff1660f81b81526001018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140182815260200194505050505060405160208183030381529060405290509392505050565b600060019054906101000a900460ff16806116a257506000809054906101000a900460ff16155b6116f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611d3c602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015611747576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61174f611a6f565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a381600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550801561182c5760008060016101000a81548160ff0219169083151502179055505b5050565b611838611a6f565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146118fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611980576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611d166026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60016020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600033905090565b600080828051906020012060405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050611ade81878787611ae9565b915050949350505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115611b67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611d6a6026913960400191505060405180910390fd5b601b8460ff1614158015611b7f5750601c8460ff1614155b15611bd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611cf06026913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611c34573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ce3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f45435265636f7665723a20696e76616c6964207369676e61747572650000000081525060200191505060405180910390fd5b8091505094935050505056fe45435265636f7665723a20696e76616c6964207369676e6174757265202776272076616c75654f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656445435265636f7665723a20696e76616c6964207369676e6174757265202773272076616c7565a26469706673582212209909d4988cd6f0e8f1a250d32a3ef98187fe9928b21a8f56830bcf70ca463a0b64736f6c634300060000334f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a2646970667358221220b72bc8a83ab95a9ad51ea75d21878dc144418788c55f37f0295dfdda587311c864736f6c63430006000033608060405234801561001057600080fd5b50611dc5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b146102f7578063a7abc6bf14610341578063bb329c69146103d5578063c4d66de8146104a9578063f2fde38b146104ed578063fc4e562214610531576100b4565b806301b0bdbd146100b95780630e800b9f1461012257806322ce1c331461018b57806324ec05031461021f5780637019202214610288578063715018a6146102ed575b600080fd5b610108600480360360408110156100cf57600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061059a565b604051808215151515815260200191505060405180910390f35b6101716004803603604081101561013857600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610857565b604051808215151515815260200191505060405180910390f35b610205600480360360c08110156101a157600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803560ff169060200190929190803590602001909291908035906020019092919050505061090a565b604051808215151515815260200191505060405180910390f35b61026e6004803603604081101561023557600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d23565b604051808215151515815260200191505060405180910390f35b6102d76004803603604081101561029e57600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fe0565b6040518082815260200191505060405180910390f35b6102f5611005565b005b6102ff61118f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6103bb600480360360c081101561035757600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803560ff16906020019092919080359060200190929190803590602001909291905050506111b8565b604051808215151515815260200191505060405180910390f35b61042e600480360360608110156103eb57600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115d1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561046e578082015181840152602081019050610453565b50505050905090810190601f16801561049b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104eb600480360360208110156104bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061167b565b005b61052f6004803603602081101561050357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611830565b005b6105806004803603604081101561054757600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a40565b604051808215151515815260200191505060405180910390f35b60006105a4611a6f565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610666576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600160008460ff1660ff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561073d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f5f6164647220686173206578697374000000000000000000000000000000000081525060200191505060405180910390fd5b60018060008560ff1660ff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555042600260008560ff1660ff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600115158273ffffffffffffffffffffffffffffffffffffffff167f91ed1c58488ad4f26f95a8e1c0009202c1599810103b82c7d7cb8b8a4c5f352660405160405180910390a36001905092915050565b600061086161118f565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561089d5760019050610904565b600160008460ff1660ff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690505b92915050565b6000600160008860ff1660ff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166109e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f5f6164647220686173207265766f6b656400000000000000000000000000000081525060200191505060405180910390fd5b84600260008960ff1660ff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410610aad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5f7369676e20697320696e76616c69640000000000000000000000000000000081525060200191505060405180910390fd5b6000610b59858585308c8c8c604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018460ff1660ff1660f81b81526001018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001945050505050604051602081830303815290604052611a77565b9050610b6361118f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f5f7369676e206973206572726f7200000000000000000000000000000000000081525060200191505060405180910390fd5b6000600160008a60ff1660ff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555085600260008a60ff1660ff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600015158773ffffffffffffffffffffffffffffffffffffffff167f0d845ae82024b310a3b75b2ae201bda3809831b599b661519ac4dc43fe80802e60405160405180910390a360019150509695505050505050565b6000610d2d611a6f565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610def576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600160008460ff1660ff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610ec5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f5f6164647220686173207265766f6b656400000000000000000000000000000081525060200191505060405180910390fd5b6000600160008560ff1660ff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555042600260008560ff1660ff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600015158273ffffffffffffffffffffffffffffffffffffffff167f0d845ae82024b310a3b75b2ae201bda3809831b599b661519ac4dc43fe80802e60405160405180910390a36001905092915050565b6002602052816000526040600020602052806000526040600020600091509150505481565b61100d611a6f565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160008860ff1660ff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611291576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f5f6164647220686173206578697374000000000000000000000000000000000081525060200191505060405180910390fd5b84600260008960ff1660ff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541061135c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5f7369676e20697320696e76616c69640000000000000000000000000000000081525060200191505060405180910390fd5b6000611408858585308c8c8c604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018460ff1660ff1660f81b81526001018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001945050505050604051602081830303815290604052611a77565b905061141261118f565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146114b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f5f7369676e206973206572726f7200000000000000000000000000000000000081525060200191505060405180910390fd5b60018060008a60ff1660ff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555085600260008a60ff1660ff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600115158773ffffffffffffffffffffffffffffffffffffffff167f91ed1c58488ad4f26f95a8e1c0009202c1599810103b82c7d7cb8b8a4c5f352660405160405180910390a360019150509695505050505050565b606030848484604051602001808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b81526014018460ff1660ff1660f81b81526001018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140182815260200194505050505060405160208183030381529060405290509392505050565b600060019054906101000a900460ff16806116a257506000809054906101000a900460ff16155b6116f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180611d3c602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015611747576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61174f611a6f565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a381600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550801561182c5760008060016101000a81548160ff0219169083151502179055505b5050565b611838611a6f565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146118fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611980576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611d166026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60016020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600033905090565b600080828051906020012060405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050611ade81878787611ae9565b915050949350505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115611b67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611d6a6026913960400191505060405180910390fd5b601b8460ff1614158015611b7f5750601c8460ff1614155b15611bd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611cf06026913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611c34573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ce3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f45435265636f7665723a20696e76616c6964207369676e61747572650000000081525060200191505060405180910390fd5b8091505094935050505056fe45435265636f7665723a20696e76616c6964207369676e6174757265202776272076616c75654f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656445435265636f7665723a20696e76616c6964207369676e6174757265202773272076616c7565a26469706673582212209909d4988cd6f0e8f1a250d32a3ef98187fe9928b21a8f56830bcf70ca463a0b64736f6c63430006000033";

    public static final String FUNC_INIT_CODE_SEAL_HASH = "INIT_CODE_SEAl_HASH";

    public static final String FUNC_ALLSEALS = "allSeals";

    public static final String FUNC_ALLSEALSLENGTH = "allSealsLength";

    public static final String FUNC_APPROVALDELEGATE = "approvalDelegate";

    public static final String FUNC_CALCULATESEAL = "calculateSeal";

    public static final String FUNC_CREATESEAL = "createSeal";

    public static final String FUNC_ENCODEPACKED = "encodePacked";

    public static final String FUNC_GETSEAL = "getSeal";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_QUERYSEALAPPROVL = "querySealApprovl";

    public static final String FUNC_QUERYSEALOWNER = "querySealOwner";

    public static final String FUNC_QUERYSEALSTATUS = "querySealStatus";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_REVOKEDELEGATE = "revokeDelegate";

    public static final String FUNC_REVOKESEAL = "revokeSeal";

    public static final String FUNC_SEALSTATUS = "sealStatus";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPGRADETO = "upgradeTo";

    public static final Event UPGRADED_EVENT = new Event("Upgraded",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event APPROVALDELEGATE_EVENT = new Event("ApprovalDelegate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint8>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REVOKE_EVENT = new Event("Revoke", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event REVOKEDELEGATE_EVENT = new Event("RevokeDelegate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint8>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SEALSCREATED_EVENT = new Event("SealsCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected SealsRouterContract(String contractAddress, Storm3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SealsRouterContract(String contractAddress, Storm3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SealsRouterContract(String contractAddress, Storm3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SealsRouterContract(String contractAddress, Storm3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<SealsRouterContract.UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<SealsRouterContract.UpgradedEventResponse> responses = new ArrayList<SealsRouterContract.UpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SealsRouterContract.UpgradedEventResponse typedResponse = new SealsRouterContract.UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<ApprovalDelegateEventResponse> getApprovalDelegateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALDELEGATE_EVENT, transactionReceipt);
        ArrayList<ApprovalDelegateEventResponse> responses = new ArrayList<ApprovalDelegateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalDelegateEventResponse typedResponse = new ApprovalDelegateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sealAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._sealType = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._addr = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalDelegateEventResponse> approvalDelegateEventFlowable(FstFilter filter) {
        return storm3j.fstLogFlowable(filter).map(new Function<Log, ApprovalDelegateEventResponse>() {
            @Override
            public ApprovalDelegateEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALDELEGATE_EVENT, log);
                ApprovalDelegateEventResponse typedResponse = new ApprovalDelegateEventResponse();
                typedResponse.log = log;
                typedResponse.sealAddr = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._sealType = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._addr = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalDelegateEventResponse> approvalDelegateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        FstFilter filter = new FstFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALDELEGATE_EVENT));
        return approvalDelegateEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(FstFilter filter) {
        return storm3j.fstLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        FstFilter filter = new FstFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<RevokeEventResponse> getRevokeEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REVOKE_EVENT, transactionReceipt);
        ArrayList<RevokeEventResponse> responses = new ArrayList<RevokeEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RevokeEventResponse typedResponse = new RevokeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sealAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RevokeEventResponse> revokeEventFlowable(FstFilter filter) {
        return storm3j.fstLogFlowable(filter).map(new Function<Log, RevokeEventResponse>() {
            @Override
            public RevokeEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REVOKE_EVENT, log);
                RevokeEventResponse typedResponse = new RevokeEventResponse();
                typedResponse.log = log;
                typedResponse.sealAddr = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RevokeEventResponse> revokeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        FstFilter filter = new FstFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REVOKE_EVENT));
        return revokeEventFlowable(filter);
    }

    public List<RevokeDelegateEventResponse> getRevokeDelegateEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REVOKEDELEGATE_EVENT, transactionReceipt);
        ArrayList<RevokeDelegateEventResponse> responses = new ArrayList<RevokeDelegateEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RevokeDelegateEventResponse typedResponse = new RevokeDelegateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sealAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._sealType = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._addr = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RevokeDelegateEventResponse> revokeDelegateEventFlowable(FstFilter filter) {
        return storm3j.fstLogFlowable(filter).map(new Function<Log, RevokeDelegateEventResponse>() {
            @Override
            public RevokeDelegateEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REVOKEDELEGATE_EVENT, log);
                RevokeDelegateEventResponse typedResponse = new RevokeDelegateEventResponse();
                typedResponse.log = log;
                typedResponse.sealAddr = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._sealType = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._addr = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RevokeDelegateEventResponse> revokeDelegateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        FstFilter filter = new FstFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REVOKEDELEGATE_EVENT));
        return revokeDelegateEventFlowable(filter);
    }

    public List<SealsCreatedEventResponse> getSealsCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEALSCREATED_EVENT, transactionReceipt);
        ArrayList<SealsCreatedEventResponse> responses = new ArrayList<SealsCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SealsCreatedEventResponse typedResponse = new SealsCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.legalAddr = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.creditCode = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sealAddr = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.length = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SealsCreatedEventResponse> sealsCreatedEventFlowable(FstFilter filter) {
        return storm3j.fstLogFlowable(filter).map(new Function<Log, SealsCreatedEventResponse>() {
            @Override
            public SealsCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEALSCREATED_EVENT, log);
                SealsCreatedEventResponse typedResponse = new SealsCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.legalAddr = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.creditCode = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sealAddr = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.length = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SealsCreatedEventResponse> sealsCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        FstFilter filter = new FstFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEALSCREATED_EVENT));
        return sealsCreatedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> INIT_CODE_SEAl_HASH() {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(FUNC_INIT_CODE_SEAL_HASH,
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> allSeals(BigInteger param0) {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(FUNC_ALLSEALS,
                Arrays.<Type>asList(new org.storm3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> allSealsLength() {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(FUNC_ALLSEALSLENGTH,
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String newOwner) {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(
                FUNC_INITIALIZE,
                Arrays.<Type>asList(new org.storm3j.abi.datatypes.Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approvalDelegate(String sealAddr, BigInteger _sealType, String _addr, BigInteger _signTime, BigInteger v, byte[] r, byte[] s) {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(
                FUNC_APPROVALDELEGATE, 
                Arrays.<Type>asList(new org.storm3j.abi.datatypes.Address(160, sealAddr),
                new org.storm3j.abi.datatypes.generated.Uint8(_sealType),
                new org.storm3j.abi.datatypes.Address(160, _addr),
                new org.storm3j.abi.datatypes.generated.Uint256(_signTime),
                new org.storm3j.abi.datatypes.generated.Uint8(v),
                new org.storm3j.abi.datatypes.generated.Bytes32(r),
                new org.storm3j.abi.datatypes.generated.Bytes32(s)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> calculateSeal(String _legalAddr, byte[] _creditCode) {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(FUNC_CALCULATESEAL,
                Arrays.<Type>asList(new org.storm3j.abi.datatypes.Address(160, _legalAddr),
                new org.storm3j.abi.datatypes.DynamicBytes(_creditCode)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createSeal(String _legalAddr, byte[] _creditCode) {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(
                FUNC_CREATESEAL, 
                Arrays.<Type>asList(new org.storm3j.abi.datatypes.Address(160, _legalAddr),
                new org.storm3j.abi.datatypes.DynamicBytes(_creditCode)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> encodePacked(String sealAddr, BigInteger _sealType, String _addr, BigInteger _signTime) {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(FUNC_ENCODEPACKED,
                Arrays.<Type>asList(new org.storm3j.abi.datatypes.Address(160, sealAddr),
                new org.storm3j.abi.datatypes.generated.Uint8(_sealType),
                new org.storm3j.abi.datatypes.Address(160, _addr),
                new org.storm3j.abi.datatypes.generated.Uint256(_signTime)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> getSeal(String param0, byte[] param1) {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(FUNC_GETSEAL,
                Arrays.<Type>asList(new org.storm3j.abi.datatypes.Address(160, param0),
                new org.storm3j.abi.datatypes.DynamicBytes(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> querySealApprovl(String sealAddr, BigInteger _sealType, String _addr) {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(FUNC_QUERYSEALAPPROVL,
                Arrays.<Type>asList(new org.storm3j.abi.datatypes.Address(160, sealAddr),
                new org.storm3j.abi.datatypes.generated.Uint8(_sealType),
                new org.storm3j.abi.datatypes.Address(160, _addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> querySealOwner(String sealAddr) {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(FUNC_QUERYSEALOWNER,
                Arrays.<Type>asList(new org.storm3j.abi.datatypes.Address(160, sealAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> querySealStatus(String sealAddr) {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(FUNC_QUERYSEALSTATUS,
                Arrays.<Type>asList(new Address(160, sealAddr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeDelegate(String sealAddr, BigInteger _sealType, String _addr, BigInteger _signTime, BigInteger v, byte[] r, byte[] s) {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(
                FUNC_REVOKEDELEGATE,
                Arrays.<Type>asList(new org.storm3j.abi.datatypes.Address(160, sealAddr),
                new org.storm3j.abi.datatypes.generated.Uint8(_sealType),
                new org.storm3j.abi.datatypes.Address(160, _addr),
                new org.storm3j.abi.datatypes.generated.Uint256(_signTime),
                new org.storm3j.abi.datatypes.generated.Uint8(v),
                new org.storm3j.abi.datatypes.generated.Bytes32(r),
                new org.storm3j.abi.datatypes.generated.Bytes32(s)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> sealStatus(String param0) {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(FUNC_SEALSTATUS,
                Arrays.<Type>asList(new Address(160, param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.storm3j.abi.datatypes.Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeTo(String newImplementation) {
        final org.storm3j.abi.datatypes.Function function = new org.storm3j.abi.datatypes.Function(
                FUNC_UPGRADETO,
                Arrays.<Type>asList(new org.storm3j.abi.datatypes.Address(160, newImplementation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static SealsRouterContract load(String contractAddress, Storm3j storm3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SealsRouterContract(contractAddress, storm3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SealsRouterContract load(String contractAddress, Storm3j storm3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SealsRouterContract(contractAddress, storm3j, transactionManager, gasPrice, gasLimit);
    }

    public static SealsRouterContract load(String contractAddress, Storm3j storm3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SealsRouterContract(contractAddress, storm3j, credentials, contractGasProvider);
    }

    public static SealsRouterContract load(String contractAddress, Storm3j storm3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SealsRouterContract(contractAddress, storm3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SealsRouterContract> deploy(Storm3j storm3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SealsRouterContract.class, storm3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SealsRouterContract> deploy(Storm3j storm3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SealsRouterContract.class, storm3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<SealsRouterContract> deploy(Storm3j storm3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SealsRouterContract.class, storm3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SealsRouterContract> deploy(Storm3j storm3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SealsRouterContract.class, storm3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }

    public static class ApprovalDelegateEventResponse extends BaseEventResponse {
        public String sealAddr;

        public BigInteger _sealType;

        public String _addr;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RevokeEventResponse extends BaseEventResponse {
        public String sealAddr;
    }

    public static class RevokeDelegateEventResponse extends BaseEventResponse {
        public String sealAddr;

        public BigInteger _sealType;

        public String _addr;
    }

    public static class SealsCreatedEventResponse extends BaseEventResponse {
        public String legalAddr;

        public byte[] creditCode;

        public String sealAddr;

        public BigInteger length;
    }
}
